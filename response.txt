#java response
name: CI

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: anchore/scan-action@v3
        with:
          image: ${{ github.repository }}
          fail-build: false
          severity-cutoff: high

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - run: mvn clean install

  sast:
    runs-on: ubuntu-latest    
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - run: mvn verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ github.repository }}

  artifactscan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: target
          path: target
      - uses: anchore/scan-action@v3
        with:
          path: "target/*.jar"
          fail-build: false





#nodejs
name: CI

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - uses: anchore/scan-action@v3
        with:
          path: "."
          fail-build: false

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm ci
      - run: npm run build

  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16  
      - run: npm ci
      - uses: securego/gosec@master
        with:
          args: ./...

  artifactscan:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16 
      - run: npm ci
      - uses: anchore/sbom-action@v0
        with:
          path: ./package-lock.json
          fail-build: false



python
name: CI
on: push

jobs:

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run SCA scan
        uses: anchore/scan-action@v3
        with:
          image: ${{ github.repository }}
          fail-build: false
          severity-cutoff: high
          
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' 
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build
        run: |
          python setup.py build
          
  sast:
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v3
      - name: Run SAST scan
        uses: anchore/scan-action@v3
        with:
          path: "."
          fail-build: false
          severity-cutoff: high
          
  artifactscan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build container image
        run: docker build . --file Dockerfile --tag localbuild/testimage:latest        
      - name: Run artifact scanning
        uses: anchore/scan-action@v3
        with:
          image: "localbuild/testimage:latest"
          fail-build: false
          severity-cutoff: high

          
Dockerized java app:
name: CI

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  sca:
    name: Scan source code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: anchore/scan-action@v3
        with:
          image-reference: "${{ github.repository }}:${{ github.sha }}"
          dockerfile-path: ./Dockerfile
          fail-build: false

  build:
    name: Build application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'
      - run: mvn clean install

  sast:
    name: Run SAST
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: anchore/scan-action@v3
        with:
          image-reference: "${{ github.repository }}:${{ github.sha }}"
          dockerfile-path: ./Dockerfile
          fail-build: false
          severity-cutoff: high

  artifactscan:
    name: Scan build artifacts
    runs-on: ubuntu-latest 
    steps:
      - uses: actions/checkout@v2
      - run: |
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64 && chmod +x container-structure-test-linux-amd64
          ./container-structure-test-linux-amd64 test --image ${{ github.repository }} --config /path/to/testconfig.yaml

  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: my-ecr-repo 
      IMAGE_TAG: ${{ github.sha }}
    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG